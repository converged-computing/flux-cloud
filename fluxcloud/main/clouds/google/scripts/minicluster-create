#!/bin/bash

run_echo kubectl apply -f ${CRD}

There are different ways to see logs for pods. First, see pods running and state.
You probably want to wait until the state changes from `ContainersCreating` to `Running`
because this is where we are pulling the chonker containers.

```bash
$ kubectl get -n flux-operator pods
```

If you need to debug (or see general output for a pod about creation) you can do:

```bash
$ kubectl -n flux-operator describe pods flux-sample-0-742bm
```

And finally, the most meaty piece of metadata is the log for the pod,
where the Flux Operator will be setting things up and starting flux.

```
# Add the -f to keep it hanging
$ kubectl -n flux-operator logs flux-sample-0-742bm -f
```

To shell into a pod to look around (noting where important flux stuff is)

```bash
$ kubectl exec --stdin --tty -n flux-operator flux-sample-0-742bm -- /bin/bash
```
```console
ls /mnt/curve
ls /etc/flux
ls /etc/flux/config
```

To get logs for the operator itself:

```bash
$ kubectl logs -n operator-system operator-controller-manager-56b5bcf9fd-j2g75
```

If you need to run in verbose (non-test) mode, set test to false in the [minicluster-lammps.yaml](minicluster-lammps.yaml).
And make sure to clean up first:

```bash
$ kubectl delete -f minicluster-lammps.yaml
```

and wait until the pods are gone:

```bash
$ kubectl get -n flux-operator pods
No resources found in flux-operator namespace.
```

Observations about comparing this to MiniKube (local):

 - The containers that are large actually pull
 - The startup times of the different pods vary quite a bit.
 - A few config maps aren't found or timed out mount for up to 3-4 minutes, then it runs.
 - Sometimes it also runs quickly!

If you want to run the same workflow again, use `kubectl delete -f` with the file
and apply it again. I wound up running with test set to true, and then saving the logs:

```bash
$ kubectl -n flux-operator logs flux-sample-0-qc5z2 > lammps.out
```

For fun, here is the first successful run of Lammps using the Flux Operator on GCP
ever!

![img/lammps.png](img/lammps.png)

## Clean up

Make sure you clean everything up! You can delete the lammps deploy first:

```bash
$ kubectl delete -f minicluster-lammps.yaml
```

And then undeploy the operator (this is again at the root of the operator repository clone)

```bash
$ make undeploy
```

And then to delete the cluster with gcloud:

```bash
$ gcloud container clusters delete --zone us-central1-a lammps-cluster
```

I like to check in the cloud console to ensure that it was actually deleted.

## Customization and Debugging

### Firewall

When I first created my cluster, the nodes could not see one another. I added a few
flags for networking, and looked at firewalls as follows:

```bash
$ gcloud container clusters describe lammps-cluster --zone us-central1-a | grep clusterIpv4Cidr
```
I didn't ultimately change anything, but I found this useful.

### Use a Different Flux Operator Container

If you own the operator, you can build and push first to develop:

```bash
$ make docker-build
$ make docker-push
```

Otherwise you'll need to set the IMG variable to your own container (that you've built and pushed). E.g, in the Makefile:

```bash
# Image URL to use all building/pushing image targets
IMG ?= ghcr.io/flux-framework/flux-operator
```
and your command:

```bash
make IMG=mycontainer/flux-operator
```

## Results

We have provided  a [process_lammps.py](process_lammps.py) script you can
use against the [lammps.out](lammps.out) to visualize the results.
First, create an environment and install dependencies:

```bash
$ python -m venv env
$ source env/bin/activate
$ pip install -r requirements.txt
```

Next, run the script targeting the output file in this directory.

```bash
$ python process_lammps.py --output-dir .
```








echo "Namespace: ${NAMESPACE}"
kubectl get -n ${NAMESPACE} pod
pods=$(kubectl get -n ${NAMESPACE} pod --output=jsonpath={.items..metadata.name});
echo "Pods: ${pods}"
pod="${pods%% *}"
echo "Pod: ${pod}"

# Prepare actual and tested comparison
expected=${TEST_DIR}/test.out.correct
actual=${TEST_DIR}/test.out

# Fallback to assuming more than one container (and wanting to see flux)
kubectl logs -n ${NAMESPACE} ${pod} -f > ${actual} 2>&1 || kubectl logs -n ${NAMESPACE} ${pod} flux-sample-1 -f > ${actual} 2>&1

echo "Actual:"
cat ${actual}

# Only run if we've derived this file
if [[ -e "${expected}" ]]; then
    echo "Expected:"
    cat ${expected}
    diff ${expected} ${actual}
fi

# Ensure all containers exit code 0
for exitcode in $(kubectl get -n flux-operator pod --output=jsonpath={.items...containerStatuses..state.terminated.exitCode}); do
   if [[ "${exitcode}" != "0" ]]; then
       echo "Container in ${NAME} had nonzero exit code"
       exit 1
    fi
done
